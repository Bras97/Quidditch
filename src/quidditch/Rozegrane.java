/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package quidditch;

import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.*;

/**
 *
 * @author Elater
 */
public class Rozegrane extends javax.swing.JFrame {
    
    Boolean pozycjaZaznaczona=false;
    Integer idDruzyny;
    Integer idRozgrywkaa;
    Boolean wyszukiwanie=false;
    /**
     * Creates new form Ranking
     */
    public Rozegrane() throws SQLException {
        initComponents();
        fillData();
        setVisible(true);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent we) {
                int odp = JOptionPane.showConfirmDialog(null, "Czy na pewno chcesz zamknąć aplikację?", "Zamknąć?", JOptionPane.YES_NO_OPTION);
                if (odp ==JOptionPane.YES_OPTION)
                    System.exit(0);
            }
            
});
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        rankTable = new javax.swing.JTable();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 40), new java.awt.Dimension(0, 40), new java.awt.Dimension(32767, 40));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 30), new java.awt.Dimension(0, 30), new java.awt.Dimension(32767, 30));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        jObraz = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jUsunButton = new java.awt.Button();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jComboBox = new javax.swing.JComboBox<>();
        jModyfikujButton = new java.awt.Button();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jDodajButton = new java.awt.Button();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jRanking = new javax.swing.JMenu();
        jZawodnicy = new javax.swing.JMenu();
        jStadiony = new javax.swing.JMenu();
        jMiotly = new javax.swing.JMenu();
        jPracownicy = new javax.swing.JMenu();
        jSedziowie = new javax.swing.JMenu();
        jZnicze = new javax.swing.JMenu();
        jKary = new javax.swing.JMenu();
        jRozegrane = new javax.swing.JMenu();
        jZaplanowane = new javax.swing.JMenu();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Quidditch rank");

        rankTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Szubinianka", "Polska", "Szubinland", "66"},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nazwa", "Narodowość", "Stadion", "Punkty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        rankTable.setName("tabelaRanking"); // NOI18N
        rankTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rankTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(rankTable);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Drużyna I:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox3.setMaximumSize(new java.awt.Dimension(56, 20));
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jUsunButton.setLabel("Usuń");
        jUsunButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUsunButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Pkt I drużyny:");

        jComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jModyfikujButton.setLabel("Modyfikuj");
        jModyfikujButton.setName(""); // NOI18N
        jModyfikujButton.setPreferredSize(new java.awt.Dimension(50, 24));
        jModyfikujButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jModyfikujButtonActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Znicz:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Drużyna II:");

        jDodajButton.setActionCommand("Dodaj");
        jDodajButton.setLabel("Dodaj");
        jDodajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDodajButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Pkt II drużyny:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Data:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Sędzia:");

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox4.setMaximumSize(new java.awt.Dimension(56, 20));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(48, 48, 48)
                        .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                                .addGap(20, 20, 20)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jDodajButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(13, 13, 13)))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(jModyfikujButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jUsunButton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addComponent(jComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jTextField2)))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(36, 36, 36))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(43, 43, 43)))
                                .addGap(5, 5, 5)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBox2, 0, 172, Short.MAX_VALUE)
                                    .addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDodajButton, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                    .addComponent(jModyfikujButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jUsunButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jRanking.setText("Ranking");
        jRanking.setBorderPainted(true);
        jRanking.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jRanking.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRankingMouseClicked(evt);
            }
        });
        jMenuBar1.add(jRanking);

        jZawodnicy.setText("Zawodnicy");
        jMenuBar1.add(jZawodnicy);

        jStadiony.setText("Stadiony");
        jStadiony.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jStadionyMouseClicked(evt);
            }
        });
        jMenuBar1.add(jStadiony);

        jMiotly.setText("Miotly");
        jMiotly.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMiotlyMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMiotly);

        jPracownicy.setText("Pracownicy");
        jPracownicy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPracownicyMouseClicked(evt);
            }
        });
        jMenuBar1.add(jPracownicy);

        jSedziowie.setText("Sędziowie");
        jSedziowie.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSedziowieMouseClicked(evt);
            }
        });
        jMenuBar1.add(jSedziowie);

        jZnicze.setText("Znicze");
        jZnicze.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jZniczeMouseClicked(evt);
            }
        });
        jMenuBar1.add(jZnicze);

        jKary.setText("Kary");
        jKary.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jKaryMouseClicked(evt);
            }
        });
        jMenuBar1.add(jKary);

        jRozegrane.setText("Rozegrane");
        jRozegrane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRozegraneMouseClicked(evt);
            }
        });
        jMenuBar1.add(jRozegrane);

        jZaplanowane.setText("Zaplanowane");
        jZaplanowane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jZaplanowaneMouseClicked(evt);
            }
        });
        jMenuBar1.add(jZaplanowane);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jSeparator1)
                                        .addContainerGap())))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(288, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jObraz, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(183, 183, 183)
                                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jObraz, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  
    
    private void rankTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rankTableMouseClicked
        int currentRow = rankTable.getSelectedRow();
        jTextField1.setText(rankTable.getValueAt(currentRow, 0).toString());
        jTextField2.setText(rankTable.getValueAt(currentRow, 1).toString());
        jTextField4.setText(rankTable.getValueAt(currentRow, 4).toString());
        
        pozycjaZaznaczona=true;
                
        
        jComboBox.removeAllItems();
        jComboBox2.removeAllItems();
        jComboBox3.removeAllItems();
        jComboBox4.removeAllItems();
        
        jComboBox.addItem(rankTable.getValueAt(currentRow, 2).toString()); 
        jComboBox2.addItem(rankTable.getValueAt(currentRow, 3).toString());
        jComboBox3.addItem(rankTable.getValueAt(currentRow, 5).toString()); 
        jComboBox4.addItem(rankTable.getValueAt(currentRow, 6).toString()); 
        
        try {
            for(Druzyna dr: Druzyna.getLista())
            {
                jComboBox.addItem(dr.getNazwa());
                jComboBox2.addItem(dr.getNazwa());                
            }
            
            ArrayList<Znicz> listaZniczy = Znicz.getLista();
            Collections.sort(listaZniczy, new Comparator<Znicz>() {
                public int compare(Znicz o1, Znicz o2) {
                    return o1.getNazwa().compareTo(o2.getNazwa());
                    }
                });
            
            for(Znicz dr: listaZniczy)
                jComboBox3.addItem(dr.getNazwa());
            for(Sedzia dr: Sedzia.getLista())
                jComboBox4.addItem(dr.getId_sedzi() + "," + dr.getNazwisko());
            
            
            
        } catch (SQLException ex) {
            Logger.getLogger(Rozegrane.class.getName()).log(Level.SEVERE, null, ex);
        }
         
             
    }//GEN-LAST:event_rankTableMouseClicked

    private void jDodajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDodajButtonActionPerformed
        if (!czyNazwaPusta())
        {
            Rozgrywka rozgrywka = new Rozgrywka();
            ArrayList<Rozgrywka> listaRozgrywek = new ArrayList<>();

            
            Druzyna d1= new Druzyna();
            Druzyna d2= new Druzyna();
            Znicz znicz = new Znicz();
            Sedzia sedzia = new Sedzia();
            try {
                for(Druzyna st: Druzyna.getLista())
                {
                    if(st.getNazwa().equals(jComboBox.getSelectedItem()))
                        d1=st;
                    if(st.getNazwa().equals(jComboBox2.getSelectedItem()))
                        d2=st;
                }
                if(d1.getId_druzyny().equals(d2.getId_druzyny()))
                {
                    JOptionPane.showMessageDialog(new Frame(), "Drużyny muszą być różne.", "BŁĄD", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                for(Znicz zn: Znicz.getLista())
                {
                    if (zn.getNazwa().equals(jComboBox3.getSelectedItem()))
                    {
                        znicz = zn;
                        break;                        
                    }
                }
                for(Sedzia se: Sedzia.getLista())
                {
                    if (jComboBox4.getSelectedItem().equals(se.getId_sedzi()+","+se.getNazwisko()))
                    {
                        sedzia = se;
                        break;                        
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(Rozegrane.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            DateFormat format = new SimpleDateFormat("yyyy, MMMMM, dd", Locale.ENGLISH);
            java.sql.Date sqlDate = null;
            String tmpS = Quidditch.conv(jTextField4.getText());
            try {
                java.util.Date date = (java.util.Date) format.parse(tmpS);
                sqlDate = new java.sql.Date(date.getTime());
            } catch (ParseException ex) {
                Logger.getLogger(Rozegrane.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            rozgrywka.setPunkty_druzyna1(jTextField1.getText());
            rozgrywka.setPunkty_druzyna2(jTextField2.getText());
            rozgrywka.setDataString(jTextField4.getText());
            rozgrywka.setDruzyna_id_druzyny(d1.getId_druzyny());
            rozgrywka.setDruzyna_id_druzyny1(d2.getId_druzyny());
            rozgrywka.setZnicz_id_znicza(znicz.getId_znicza());
            rozgrywka.setSedzia_id_sedzi(sedzia.getId_sedzi());

            rozgrywka.setData(sqlDate);
                                  
            try {

            rozgrywka.addQuery();            
            wypelnijTabele();
            
            } catch (SQLException ex) {
                Logger.getLogger(Rozegrane.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        
    }//GEN-LAST:event_jDodajButtonActionPerformed

    private void jModyfikujButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jModyfikujButtonActionPerformed
            
            if(!pozycjaZaznaczona)
            {
                JOptionPane.showMessageDialog(new Frame(), "Proszę wybrać rozgrywkę z tabeli, którą chcesz zaktualizować.", "BŁĄD", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            int currentRow = rankTable.getSelectedRow();    
            Rozgrywka rozgrywka = new Rozgrywka();
            
            int ID_rozgrywki=Integer.parseInt(rankTable.getModel().getValueAt(currentRow, 7).toString());
//            int ID_DR1=Integer.parseInt(rankTable.getModel().getValueAt(currentRow, 8).toString());
//            int ID_DR2=Integer.parseInt(rankTable.getModel().getValueAt(currentRow, 9).toString());
//            int ID_ZN=Integer.parseInt(rankTable.getModel().getValueAt(currentRow, 10).toString());
//            int ID_SE=Integer.parseInt(rankTable.getModel().getValueAt(currentRow, 11).toString());
            
            Druzyna d1= new Druzyna();
            Druzyna d2= new Druzyna();
            Znicz znicz = new Znicz();
            Sedzia sedzia = new Sedzia();
            try {
                for(Druzyna st: Druzyna.getLista())
                {
                    if(st.getNazwa().equals(jComboBox.getSelectedItem()))
                        d1=st;
                    if(st.getNazwa().equals(jComboBox2.getSelectedItem()))
                        d2=st;
                }
                if(d1.getId_druzyny().equals(d2.getId_druzyny()))
                {
                    JOptionPane.showMessageDialog(new Frame(), "Drużyny muszą być różne.", "BŁĄD", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                for(Znicz zn: Znicz.getLista())
                {
                    if (zn.getNazwa().equals(jComboBox3.getSelectedItem()))
                    {
                        znicz = zn;
                        break;                        
                    }
                }
                for(Sedzia se: Sedzia.getLista())
                {
                    if (jComboBox4.getSelectedItem().equals(se.getId_sedzi()+","+se.getNazwisko()))
                    {
                        sedzia = se;
                        break;                        
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(Rozegrane.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            DateFormat format = new SimpleDateFormat("yyyy, MMMMM, dd", Locale.ENGLISH);
            java.sql.Date sqlDate = null;
            String tmpS = Quidditch.conv(jTextField4.getText());
            try {
                java.util.Date date = (java.util.Date) format.parse(tmpS);
                sqlDate = new java.sql.Date(date.getTime());
            } catch (ParseException ex) {
                Logger.getLogger(Rozegrane.class.getName()).log(Level.SEVERE, null, ex);
            }
        try { 
            rozgrywka.updateQuery(ID_rozgrywki, Integer.parseInt(jTextField1.getText()), Integer.parseInt(jTextField2.getText()),
                    sqlDate, d1.getId_druzyny(),d2.getId_druzyny(),znicz.getId_znicza(),sedzia.getId_sedzi());
        } catch (SQLException ex) {
            Logger.getLogger(Rozegrane.class.getName()).log(Level.SEVERE, null, ex);
        }
 
            pozycjaZaznaczona=false;
            
            try {
                wypelnijTabele();
            } catch (SQLException ex) {
                Logger.getLogger(Rozegrane.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_jModyfikujButtonActionPerformed

    private void jUsunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUsunButtonActionPerformed
        
        try {
            if(!pozycjaZaznaczona)
            {
                JOptionPane.showMessageDialog(new Frame(), "Proszę wybrać rozgrywkę z tabeli, którą chcesz usunąć.", "BŁĄD", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            int currentRow = rankTable.getSelectedRow();
            if (JOptionPane.showConfirmDialog(null,
                    "Czy na pewno chcesz nieodwracalnie usunąć zaznaczoną rozgrywkę?", "Usunąć?",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION){
                Rozgrywka d = new Rozgrywka();
                int czyUsunieto=-1;
                
                    czyUsunieto = d.delQuery(Integer.parseInt(rankTable.getModel().getValueAt(currentRow, 6).toString()));
                    
                switch(czyUsunieto)
                {
                    case 1:  JOptionPane.showMessageDialog(new Frame(), "Pomyślnie usunięto drużynę.", "Sukces", JOptionPane.INFORMATION_MESSAGE);
                    break;
                    default: JOptionPane.showMessageDialog(new Frame(), "Coś poszło nie tak.", "BŁĄD", JOptionPane.INFORMATION_MESSAGE);
                    break;
                }
            }
            pozycjaZaznaczona=false;
//        DefaultTableModel model = (DefaultTableModel) rankTable.getModel();
//        model.fireTableDataChanged();
//        rankTable.repaint();
            wypelnijTabele();
        } catch (SQLException ex) {
            Logger.getLogger(Rozegrane.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jUsunButtonActionPerformed

    private void jRankingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRankingMouseClicked
        try {
            Ranking t = new Ranking();
        } catch (SQLException ex) {
            Logger.getLogger(Rozegrane.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
    }//GEN-LAST:event_jRankingMouseClicked

    private void jStadionyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jStadionyMouseClicked
        try {
            Stadiony stadiony = new Stadiony();
            this.dispose();        // TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(Rozegrane.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jStadionyMouseClicked

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jMiotlyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMiotlyMouseClicked
        try {
            Miotly t = new Miotly();
            this.dispose();        // TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(Rozegrane.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMiotlyMouseClicked

    private void jPracownicyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPracownicyMouseClicked
        try {
            Pracownicy t = new Pracownicy();
            this.dispose();        // TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(Rozegrane.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jPracownicyMouseClicked

    private void jSedziowieMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSedziowieMouseClicked
        try {
            Sedziowie t = new Sedziowie();
            this.dispose();        // TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(Rozegrane.class.getName()).log(Level.SEVERE, null, ex);
        }// TODO add your handling code here:
    }//GEN-LAST:event_jSedziowieMouseClicked

    private void jZniczeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jZniczeMouseClicked
        try {
            Znicze t = new Znicze();
            this.dispose();        // TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(Rozegrane.class.getName()).log(Level.SEVERE, null, ex);
        }// TODO add your handling code here:
    }//GEN-LAST:event_jZniczeMouseClicked

    private void jKaryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jKaryMouseClicked
        try {
            Kary t = new Kary();
            this.dispose();        // TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(Rozegrane.class.getName()).log(Level.SEVERE, null, ex);
        }// TODO add your handling code here:
    }//GEN-LAST:event_jKaryMouseClicked

    private void jRozegraneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRozegraneMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jRozegraneMouseClicked

    private void jZaplanowaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jZaplanowaneMouseClicked
        try {
            Zaplanowane t = new Zaplanowane();
            this.dispose();        // TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(Rozegrane.class.getName()).log(Level.SEVERE, null, ex);
        }// TODO add your handling code here:
    }//GEN-LAST:event_jZaplanowaneMouseClicked

    public Boolean czyNazwaPusta()
    {
        if(jTextField1.getText().equals("") || jTextField2.getText().equals("") )
        {
            JOptionPane.showMessageDialog(new Frame(), "Nazwy drużyn nie mogą być puste!", "BŁĄD", JOptionPane.INFORMATION_MESSAGE);
            return true;
        }
        return false;  
    }
    
    public void wypelnijTabele() throws SQLException
    {
        
        DefaultTableModel defaultTableModel = new DefaultTableModel();
        defaultTableModel.addColumn("Pkt I drużyny");
        defaultTableModel.addColumn("Pkt II drużyny");
        defaultTableModel.addColumn("Drużyna I");
        defaultTableModel.addColumn("Drużyna II");
        defaultTableModel.addColumn("Data");
        defaultTableModel.addColumn("Znicz");
        defaultTableModel.addColumn("Sędzia");
        defaultTableModel.addColumn("Id_rozgrywki");
        defaultTableModel.addColumn("Id_I_druzyny");
        defaultTableModel.addColumn("Id_II_druzyny");
        defaultTableModel.addColumn("Id_znicza");
        defaultTableModel.addColumn("Id_sedziego");
        defaultTableModel.addColumn("Date");

        Rozgrywka d = new Rozgrywka();
        ArrayList<Rozgrywka> listaRozgrywek = new ArrayList<>();
        
        listaRozgrywek = d.getListaToToday();

         Collections.sort(listaRozgrywek, new Comparator<Rozgrywka>() {
            public int compare(Rozgrywka o1, Rozgrywka o2) {
                return -o1.getData().compareTo(o2.getData());
                }
            });

         
        Druzyna s = new Druzyna();
        ArrayList<Druzyna> listaDruzyn = s.getLista();
                
        for(Rozgrywka za: listaRozgrywek)
        {
            Druzyna druzyna1=null;
            Druzyna druzyna2=null;
            for(Druzyna st: listaDruzyn)
            {
                if(za.getDruzyna_id_druzyny()==st.getId_druzyny())
                {
                    druzyna1=st;
                }
                if(za.getDruzyna_id_druzyny1()==st.getId_druzyny())
                {
                    druzyna2=st;
                }
            }
            Znicz znicz=null;
            for(Znicz zn: Znicz.getLista())
            {
                if(za.getZnicz_id_znicza().equals(zn.getId_znicza()))
                {
                    znicz=zn;
                    break;
                }
            }
            Sedzia sedzia=null;
            for(Sedzia se: Sedzia.getLista())
            {
                if(za.getSedzia_id_sedzi().equals(se.getId_sedzi()))
                {
                    sedzia=se;
                    break;
                }
            }
            defaultTableModel.addRow(new Object[] {druzyna1.getPunkty(),druzyna2.getPunkty(),druzyna1.getNazwa(),
                druzyna2.getNazwa(), za.getDataString(), znicz.getNazwa(), (sedzia.getId_sedzi()+","+sedzia.getNazwisko()), za.getId_rozgrywki(),druzyna1.getId_druzyny(),
                druzyna2.getId_druzyny(),znicz.getId_znicza(),sedzia.getId_sedzi(),za.getData()});
        }

        rankTable.setModel(defaultTableModel);
        rankTable.getColumnModel().getColumn(0).setPreferredWidth(15);
        rankTable.getColumnModel().getColumn(1).setPreferredWidth(15);


        rankTable.removeColumn(rankTable.getColumnModel().getColumn(12));
        rankTable.removeColumn(rankTable.getColumnModel().getColumn(11));
        rankTable.removeColumn(rankTable.getColumnModel().getColumn(10));
        rankTable.removeColumn(rankTable.getColumnModel().getColumn(9));
        rankTable.removeColumn(rankTable.getColumnModel().getColumn(8));
        rankTable.removeColumn(rankTable.getColumnModel().getColumn(7));
                
    }
    
    
    public void fillData() throws SQLException {

                //Wysrodkuj
                Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
                this.setLocation((dim.width-this.getSize().width)/2, (dim.height-this.getSize().height)/2); 
        
                jTextField1.setColumns(10);
                jTextField2.setColumns(10);
                jTextField4.setColumns(10);
                try{
                    ImageIcon img = new ImageIcon(getClass().getResource("/img/kalendarz.png"));
                    Image image = img.getImage(); // transform it 
                    Image newimg = image.getScaledInstance(271, 190,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                    img = new ImageIcon(newimg);
                    jObraz.setIcon(img);
                    //jObraz.setIcon(new ImageIcon(getClass().getResource("/img/zawodnik.png")));
                }catch(Exception e){ System.out.println("Nie znaleziono zdjęcia\n");} 
                setResizable(false);
                            
                
                
                jComboBox.removeAllItems();
                jComboBox2.removeAllItems(); 
                jComboBox3.removeAllItems(); 
                jComboBox4.removeAllItems();
                //jComboBox3.setPreferredSize(dim);
                jComboBox.setPrototypeDisplayValue("10");
                jComboBox2.setPrototypeDisplayValue("10");
                jComboBox3.setPrototypeDisplayValue("10");
                jComboBox4.setPrototypeDisplayValue("10");


                try {

                    ArrayList<Druzyna> listaDruzyn = Druzyna.getLista();
                    Collections.sort(listaDruzyn, new Comparator<Druzyna>() {
                        public int compare(Druzyna o1, Druzyna o2) {
                            return o1.getNazwa().compareTo(o2.getNazwa());
                            }
                        });
                    for(Druzyna st: listaDruzyn)
                    {
                        jComboBox.addItem(st.getNazwa());
                        jComboBox2.addItem(st.getNazwa());
                        
                    }

                    ArrayList<Znicz> listaZniczy = Znicz.getLista();               
                    for(Znicz st: listaZniczy)
                        jComboBox3.addItem(st.getNazwa()); 
                    
                    ArrayList<Sedzia> listaSedziow = Sedzia.getLista();
 /*                   Collections.sort(listaSedziow, new Comparator<Sedzia>() {
                        public int compare(Sedzia o1, Sedzia o2) {
                            return o1.getNazwisko().compareTo(o2.getNazwisko());
                            }
                        });
                    */
                    for(Sedzia st: listaSedziow)
                        jComboBox4.addItem(st.getId_sedzi() + "," + st.getNazwisko());                        
                              
                    
                } catch (SQLException ex) {
                    Logger.getLogger(Rozegrane.class.getName()).log(Level.SEVERE, null, ex);
                }
                wypelnijTabele();
		
            }  
    /**
     * @param args the command line arguments
     */
    

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
                        //in.wyswietl();
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Rozegrane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Rozegrane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Rozegrane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Rozegrane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>        
        //</editor-fold>        
        //</editor-fold>        
        //</editor-fold>        
        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                try {
                    new Rozegrane().setVisible(true);
                    
                    //Ranking.rankTable.add("J","K","L","O");
                } catch (SQLException ex) {
                    Logger.getLogger(Rozegrane.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        });
 
    
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JComboBox<String> jComboBox;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private java.awt.Button jDodajButton;
    private javax.swing.JMenu jKary;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenu jMiotly;
    private java.awt.Button jModyfikujButton;
    private javax.swing.JLabel jObraz;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JMenu jPracownicy;
    private javax.swing.JMenu jRanking;
    private javax.swing.JMenu jRozegrane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu jSedziowie;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenu jStadiony;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField4;
    private java.awt.Button jUsunButton;
    private javax.swing.JMenu jZaplanowane;
    private javax.swing.JMenu jZawodnicy;
    private javax.swing.JMenu jZnicze;
    private javax.swing.JTable rankTable;
    // End of variables declaration//GEN-END:variables
}
